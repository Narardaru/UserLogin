След като прочетох вашият email, нямах достатъчно време да донаправя изискванията, понеже крайния срок беше на следващия ден.
Сега обаче видях, че крайния срок е удължен до 12.06. И се надявам за времето което разполагах, да съм направил удовлетворително задачата,
която беше 
"Може би ако се имплементира ilist за някой спуюисък от по-големите
проекти UserLogin или StudentInfoSysytem
и той включва допълнителни методи, подходящи за съответния списък."

Работя в проекта StudentInfoSystem, като първо създадох StudentsList.cs, който имплементира IList. След като добавих необходимите
за интерфейса методи и им създадох тяло, реших, че има голямо място за грешка при въвеждането на данните. Добавих в конструктора на Student.cs
проверка за легитимността на данните с помощта на регулярни изрази, като за организираност, code reusing и добра практика, написах отделни
методи за различните проверки. Също при неуспешно зададени стойности при създаване на обект от тип Student, добавих и свой NameException.cs,
който да извежда съобщение когато е хвърлен. След това отидох при StudentData.cs, където всъщност там беше списъка, който целих да
променя с моя StudentsList. След като замених List<Student> с StudentsList и се уверих, че е успешно, добавих допълнителни методи към
StudentsList, които са конкретни за обекти от тип Student. Добавих void RemoveGroup(int group), StudentsList GetByStatus(Status status),
StudentsList GetByLastName(string name), StudentsList GetByFstAndLstName(string fname, string lname), StudentsList GetByCourse(string degree, int course) и
void SortStudentsList(), в който съм имплементирал Insertion Sort, като сортира студентите спрямо курса във възходящ ред с цел
бързодействие при обхождане на масива _students[]. Избрал съм този тип сортиране поради малкия брой възможности (1-4) и лесната му
имплементация
